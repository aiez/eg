#!/usr/bin/env bash

here() { cd $1; basename `pwd`; }

if [ -f eg ]; then

chmod +x eg
Gold=$PWD
_c0="\033[00m"     # white
_c1="\033[01;32m"  # green
_c2="\033[01;34m"  # blue
_c3="\033[31m"     # red
_c5="\033[35m"     # purple
_c6="\033[33m"     # yellow
_c7="\033[36m"     # turquoise _c8="\033[96m"  # magenta

alias l='ls -G'
alias ..='cd ..'
alias gg="git pull"
alias gs="git status"
alias gp="git commit -am 'saving'; git push; git status"
alias vi="vim -u $Gold/etc/vimrc "
alias gold="bash $Gold/etc/run.sh "
alias tmux="$(which tmux) -f $Gold/etc/tmuxrc "

PROMPT_COMMAND='echo -ne "${_c2}iSH:${_c6}$(git branch 2>/dev/null | grep '^*' | colrm 1 2) ";PS1="${_c1}$_c0$(here ../..)/$(here ..)/$(here .) ${_c3}\!>${_c0}\e[m "'

echo -ne "\033[96m"
cat<<-"EOF"

    (\____/)
      (_oo_)         ezai/eg
        (O)          By your command ...
      __||__    \)
   []/______\[] /
   / \______/ \/
  /    /__\          Ezai v3 (c) 2020
 (\   /____\         <timm@ieee.org>

EOF
echo -ne "\033[00m"
fi

#-----------------------------------------------------------
tmuxrc() { cat<<'EOF'
set -g aggressive-resize on
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix
set -g base-index 1
# start with pane 1
bind | split-window -h -c "#{pane_current_path}"  
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %
# open new windows in the current path
bind c new-window -c "#{pane_current_path}"
# reload config file
bind r source-file $Tnix/.config/dottmux
unbind p
bind p previous-window
# shorten command delay
set -sg escape-time 1
# don't rename windows automatically
set-option -g allow-rename off
# mouse control (clickable windows, panes, resizable panes)
set -g mouse on
# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
# enable vi mode keys
set-window-option -g mode-keys vi
# set default terminal mode to 256 colors
set -g default-terminal "screen-256color"
bind-key u capture-pane \;\
    save-buffer /tmp/tmux-buffer \;\
    split-window -l 10 "urlview /tmp/tmux-buffer"
bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none
#  modes
setw -g clock-mode-colour colour5
# panes
# statusbar
set -g status-position top
set -g status-justify left
set -g status-bg colour232
set -g status-fg colour137
###set -g status-attr dim
set -g status-left ''
set -g status-right '#{?window_zoomed_flag,🔍,} #[fg=colour255,bold]#H #[fg=colour255,bg=colour19,bold] %b %d #[fg=colour255,bg=colour8,bold] %H:%M '
set -g status-right '#{?window_zoomed_flag,🔍,} #[fg=colour255,bold]#H '
set -g status-right-length 50
set -g status-left-length 20
setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
# messages
# layouts
bind S source-file $Tnix/.config/tmux-session1
setw -g monitor-activity on
set -g visual-activity on
EOF
}

#-----------------------------------------------------------
vimrc() { cat<<'EOF'
set list
set listchars=tab:>-
set backupdir-=.
set backupdir^=~/tmp,/tmp
set nocompatible              
"filetype plugin indent on
set modelines=3
set scrolloff=3
set autoindent
set hidden "remember ls
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set backspace=indent,eol,start
set laststatus=2
set splitbelow
set paste
set mouse=a
set title
set number
autocmd BufEnter * cd %:p:h
set showmatch
set matchtime=15
set background=light
set syntax=on
syntax enable
set ignorecase
set incsearch
set smartcase
set showmatch
set hlsearch
set nofoldenable    " disable folding
set ruler
set laststatus=2
set statusline=
set statusline+=%F
set statusline+=\ 
set statusline+=%m
set statusline+=%=
set statusline+=%y
set statusline+=\ 
set statusline+=%c 
set statusline+=:
set statusline+=%l
set statusline+=\ 
set lispwords+=defthing   
set lispwords+=doitems    
set lispwords+=deftest
set lispwords+=defkeep
set lispwords+=labels
set lispwords+=labels
set lispwords+=doread
set lispwords+=while
set lispwords+=until
set path+=../**
if has("mouse_sgr")
    set ttymouse=sgr
else
    set ttymouse=xterm2 
end        
colorscheme default
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
map Z 1z=
set spell spelllang=en_us
set spellsuggest=fast,20 "Don't show too much suggestion for spell check
nn <F7> :setlocal spell! spell?<CR>
let g:vim_markdown_fenced_languages = ['awk=awk']
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'tbastos/vim-lua'
Plugin 'airblade/vim-gitgutter'
"Plugin 'itchyny/lightline.vim'
Plugin 'junegunn/fzf'
"  Plugin 'humiaozuzu/tabbar'
"  Plugin 'drmingdrmer/vim-tabbar'
Plugin 'tomtom/tcomment_vim'
Plugin 'ap/vim-buftabline'
Plugin 'junegunn/fzf.vim'
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'seebi/dircolors-solarized'
Plugin 'nequo/vim-allomancer'
Plugin 'nanotech/jellybeans.vim'
Plugin 'vimwiki/vimwiki'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-markdown'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
colorscheme jellybeans
map <C-o> :NERDTreeToggle<CR>
nnoremap <Leader><space> :noh<cr>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
set titlestring=%{expand(\"%:p:h\")}
hi Normal guibg=NONE ctermbg=NONE
hi NonText guibg=NONE ctermbg=NONE
        set fillchars=vert:\|
hi VertSplit cterm=NONE  
        set ts=2 
        set sw=2 
        set sts=2  
        set et 
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif 
set hidden
nnoremap <C-N> :bnext<CR>
nnoremap <C-P> :bprev<CR>
set formatoptions-=t
set nowrap 
" Markdown
let g:markdown_fenced_languages = ['awk']
EOF
}

#-----------------------------------------------------------
lua2md() { cat<<'EOF'
function line() {
  if (sub(/^--\]\]/,"")) { # multi-line comments end
    b4  = code = 1
    top = loop = 0 
    return
  } 
  if (sub(/^--\[\[/,"")) { # multi-line comments start
    if (!top) print "```"  # if top, then nothing to close
    b4  = loop = 1 
    top = code = 0
    return
  } 
  if (loop) { # loop over multi line commnts
    print
    return
  } 
  # toggle between comments and non-comments
  now = sub(/^-- /,"")
  if (  b4 && !now ) { code=1; print "```lua" }
  if ( !b4 &&  now ) { code=0; print "```"    }
  print 
  b4  = now
  top = loop = 0 
}

BEGIN { 
  code = 0 # are we processing code?
  b4   = 0 # was the line before a comment?
  loop = 0 # are we looping thru multi-line comments?
  top  = 1 # is this the first thing in the file?
  while (getline) line()
  if(code) print "```\n"
}
EOF
}

#-----------------------------------------------------------
gitignore() { cat<<'EOF'
### VIM ###

# Swap
[._]*.s[a-v][a-z]
!*.svg  # comment out if you don't need vector files
[._]*.sw[a-p]
[._]s[a-rt-v][a-z]
[._]ss[a-gi-z]
[._]sw[a-p]

# Session
Session.vim
Sessionx.vim

# Temporary
.netrwhist
*~
# Auto-generated tag files
tags
# Persistent undo
[._]*.un~

### Macos ###

# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

EOF
}

#-----------------------------------------------------------
allsh() { cat<<'EOF'
#!/usr/bin/env bash

for i in *.lua; do
  s="$s print('\n'..string.rep(\"-\",70)); print('-- $i','\n'); dofile('$i'); "
done 

lua="../lua-5.3.5/src/lua" # true if we are running on travis

if [ ! -f "$lua" ] # true if we are NOT running on travis
then lua="lua"
fi

$lua -e "$s" | 
gawk ' 
1                                # a) print current line      
/^-- Test.*oops/ { err = $5}     # b) catch current error number
END              { exit err - 1} # c) one test is designed to fail 
                                 #    (just to test the test engine)
                                 #    so "pass" really means, "only
                                 #    one test fails"
'

out="$?"

echo "Number of problems: $out"

exit $out
EOF
}

#-----------------------------------------------------------
travis() { cat<<'EOF'
language: C

sudo: true

install:
  - curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz
  - tar zxf lua-5.3.5.tar.gz
  - cd lua-5.3.5
  - make linux test

script:
  - ls
  - cd ../test
  - pwd
  - bash all.sh
EOF
}

#-----------------------------------------------------------
header() { cat<<-'EOF'
   BEGIN { FS="\n"; RS="" }
   NR==1 { if($0 ~ /name=top>/) next  }
         { print ""; print $0 }
EOF
}

#-----------------------------------------------------------
Makefile() { cat<<'EOF'

LUA=$(shell ls src/*.lua)
X=$(LUA:.lua=.md)
MD=${subst src/, doc/, $X}

docs : dirs $(MD)

dirs: 
	@mkdir -p etc doc src $(HOME)/tmp
	@mkdir -p test test/data test/data/raw test/data/cooked

doc/%.md : src/%.lua README.md
	@gawk 'BEGIN{FS="\n";RS=""} {print;exit}' README.md > $@
	@echo                        >> $@
	@gawk -f etc/lua2md.awk $<   >> $@
EOF
}

#-----------------------------------------------------------
ensure() {
  if    [ -f eg ]
  then  
        [ eg -nt "$1/$3" ] &&  $2 > $1/$3 && echo "#> $3..."
  else  >&2 echo "#E> not running in same dir as ex" 
  fi
}

#-----------------------------------------------------------
while getopts "id" arg; do
    case $arg in
      i) ensure etc  tmuxrc     tmuxrc    
         ensure etc  vimrc      vimrc
         ensure etc  header     header.awk
         ensure etc  lua2md     lua2md.awk
         ensure test allsh      all.sh
         ensure .    Makefile   Makefile
         ensure .    travis     .travis.yml;;
      d) make docs;;
    esac
done
